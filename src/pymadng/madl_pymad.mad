--[=[
 o-----------------------------------------------------------------------------o
 |
 | Pymad module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: J. Gray, joshua.mark.gray@cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide MAD minimal feature to communicate with parent Python process

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local is_string in MAD.typeid

local assert = assert

-- implementation -------------------------------------------------------------o

local pymad = MAD.object 'pymad' {}

local function send(self, str)
  assert(is_string(str), "invalid argument #2 (string expected)")
  self.__py_out:write(str, "\n")
  return self
end

local function open_pipe (self, name)
  self.__py_name = name
  self.__py_out = assert(io.open(name, "w"))
  self.__py_out:setvbuf("no")
  return self
end

local function publish (self, env_)
  local env = env_ or _G
  env[self.name] = self
  return self
end

pymad:set_methods {
  send      = send,
  publish   = publish,
  open_pipe = open_pipe,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return { pymad = pymad }