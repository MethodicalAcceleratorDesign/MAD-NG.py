[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"
# requires = ["hatchling"]
# build-backend = "hatchling.build"

[project]
name = "pymadng"
dynamic = ["version"]
authors = [
  { name="Joshua Gray" },
]
description = "A python interface to MAD-NG running as subprocess"
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: Unix",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Physics"
]
dependencies = [
  'numpy >= 1.11.0', #for dtype in numpy.random.randint (for tests), otherwise 1.9.0 is minimum for numpy.ndarray.tobytes
]

[project.urls]
"Repository" = "https://github.com/MethodicalAcceleratorDesign/MAD-NG.py"
"Bug Tracker" = "https://github.com/MethodicalAcceleratorDesign/MAD-NG.py/issues"
"MAD Source" = "https://github.com/MethodicalAcceleratorDesign/MAD"
"Documentation" = "https://pymadng.readthedocs.io/en/latest/"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "pymadng.__version__"}

[project.optional-dependencies]
tfs = ["tfs-pandas>3.0.0"]

# ----- Dev Tools Configuration ----- #

[tool.ruff]
exclude = [
  ".eggs",
  ".git",
  ".mypy_cache",
  ".venv",
  "_build",
  "build",
  "dist",
]

# Assume Python 3.10+
target-version = "py310"

line-length = 100
indent-width = 4

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
ignore = [
  "E501",  # line too long
  "FBT001",  # boolean-type-hint-positional-argument
  "FBT002",  # boolean-default-value-positional-argument
  "PT019",  # pytest-fixture-param-without-value (but suggested solution fails)
]
extend-select = [
    "F",        # Pyflakes rules
    "W",        # PyCodeStyle warnings
    "E",        # PyCodeStyle errors
    "I",        # Sort imports properly
    "A",        # Detect shadowed builtins
    "N",        # enforce naming conventions, e.g. ClassName vs function_name
    "UP",       # Warn if certain things can changed due to newer Python versions
    "C4",       # Catch incorrect use of comprehensions, dict, list, etc
    "FA",       # Enforce from __future__ import annotations
    "FBT",      # detect boolean traps
    "ISC",      # Good use of string concatenation
    "BLE",      # disallow catch-all exceptions
    "ICN",      # Use common import conventions
    "RET",      # Good return practices
    "SIM",      # Common simplification rules
    "TID",      # Some good import practices
    "TC",       # Enforce importing certain types in a TYPE_CHECKING block
    "PTH",      # Use pathlib instead of os.path
    "NPY",      # Some numpy-specific things
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []